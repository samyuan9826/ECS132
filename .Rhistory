singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
source('hw1/Code1.R')
singplate(0.3)
singplate(0.3)
source('hw1/Code1.R')
singplate(0.3)
singplate(0.3)
singplate(0.3)
kk <- singplate(0.3)
singplate(0.3)
source('hw1/Code1.R')
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
source('hw1/Code1.R')
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
source('hw1/Code1.R')
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
source('hw1/Code1.R')
singplate(0.3)
singplate(0.3)
source('hw1/Code1.R')
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
singplate(0.3)
kk <- replicate(100,singplate(0.3))
kk
mean(kk)
kk <- replicate(50000,singplate(0.3))
mean(kk)
source('hw1/Code1.R')
simplate(50000,0.3)
simplate(50000,0.4)
simplate(50000,0.8)
simplate(50000,0.1)
simplate(50000,0.2)
simplate(50000,1)
simplate(50000,0.9)
simplate(50000,0.8)
simplate(50000,0.7)
simplate(50000,0.68)
simplate(50000,0.63)
simplate(50000,0.5)
simplate(50000,0.5)
simplate(50000,0.4)
simplate(50000,0.45)
runif(1)
source('hw1/Code1.R')
b <- leave_simulate(50000)
b <- leave_simulate(5)
a <- leave_single()
a <- leave_single()
a <- leave_single()
a <- leave_single()
a <- leave_single()
a <- leave_single()
a <- leave_single()
a <- leave_single()
a <- leave_single()
source('hw1/Code1.R')
b <- leave_simulate(50000)
source('hw1/Code1.R')
b <- leave_simulate(50000)
b <- leave_simulate(10000)
b <- leave_simulate(40000)
<<<<<<< HEAD
0.6*0.2
source('hw1/Code1.R')
b <- leave_simulate(50000)
b <- leave_simulate(100000)
b <- leave_simulate(500000)
generate_line_output <- function(q, input, prev_error){
'
generate_line_output: Function that simulates the behavior of the line.
params:
q         : Probability of line failing
input     : The input given by user
prev_error: Boolean indicating if error was previously reported.
'
if (prev_error == TRUE){
return (0, TRUE)
}
else{
if (runif(1) < q){return (0,TRUE)}
else {return (input, FALSE)}
}
}
generate_line_output(0.2,1,FALSE)
generate_line_output <- function(q, input, prev_error){
'
generate_line_output: Function that simulates the behavior of the line.
params:
q         : Probability of line failing
input     : The input given by user
prev_error: Boolean indicating if error was previously reported.
'
if (prev_error == TRUE){
return (0, TRUE)
}
else{
if (runif(1) < q){return (0,TRUE)}
else {return (c(input, FALSE))}
}
}
generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
0 == FALSE
c[2]
c[2] == FALSE
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
generate_line_output <- function(q, input, prev_error){
'
generate_line_output: Function that simulates the behavior of the line.
params:
q         : Probability of line failing
input     : The input given by user
prev_error: Boolean indicating if error was previously reported.
'
if (prev_error == TRUE){
return (0, TRUE)
}
else{
if (runif(1) < q){return (c(0,TRUE))}
else {return (c(input, FALSE))}
}
}
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c <- generate_line_output(0.2,1,FALSE)
c,d <- generate_line_output(0.2,1,FALSE)
source('hw1/Code1.R')
simline(10000, 0.5, 0.2, 4, 25)
simline(10000, 0.5, 0.2, 4, 25)
source('hw1/Code1.R')
simline(10000, 0.5, 0.2, 4, 25)
source('hw1/Code1.R')
simline(10000, 0.5, 0.2, 4, 25)
source('hw1/Code1.R')
simline(10000, 0.5, 0.2, 4, 25)
simline(10000, 0.5, 0.2, 4, 25)
source('hw1/Code1.R')
simline(10000, 0.5, 0.2, 4, 25)
source('hw1/Code1.R')
simline(10000, 0.5, 0.2, 4, 25)
0.6*0.2
a <= 0.6*0.2
a <- 0.6*0.2
a + (1 - 0.6)
p = 0.6
q = 0.2
p * q
x <- (1-p)*(1-q)
x = x+ (1-p)*q
x = x + p*(1-q)*q
x = x + (p*q)
p*q+(1-p)
0.52*x
(1-p)+p*q
0.2 + (0.52*(1-p)*(1-q))
=======
>>>>>>> 0f8a384103a40f47840e8f1bf402575a8448779c
source('hw1/Code1.R')
a <- leave_single()
a(a[2] != 1)
a[2] != 1
a <- replicate(1000,leave_single())
a
dim(a)
a[1]
a[2]
a[3]
a[1:2]
a[1:5]
View(a)
a[1,1]
a[1,1:2]
a <- replicate(3,leave_single())
a <- replicate(1000,leave_single())
a[1,:]
a[1,]
a[a[1,] > 2]
a[a[1,] > 0]
b <- a[a[1,] > 0]
source('hw1/Code1.R')
a <- replicate(1000,leave_single())
a
View(a)
b <- a[1,]
a
View(a)
a[a[1,] == TRUE]
b <- a[a[1,] == TRUE]
b
b <- a[ a[1,] == TRUE]
dim(a)
dim(b)
View(a)
subset(a, SomeOut == TRUE)
a''
a'
sf
fd
;
gsj
exit9)
''
transpose(a)
View(a)
View(a)
typeof(a)
filter(a, SomeOut == TRUE)
source('hw1/Code1.R')
a <- replicate(100, leave_single())
a
source('hw1/Code1.R')
a <- replicate(100, leave_single())
a
a
View(generate_actual_input)
a
dim(a)
source('hw1/Code1.R')
a <- replicate(100, leave_single())
a
dim(a)
View(a)
b <- a[1,]
b
b <- a[1,] > 10
b <- a[1,] == TRUE
b
a[b]
a
dim(a)
c <- reshape(a, nrow = 100, ncol = 2)
reshape(a)
a <- reshape(r, 'long')
c <- reshape(a, 'long')
reshape(a, direction = 'long')
c
a
int(a)
numeric(a)
a
as.numeric(a)
a.shape
c <- as.numeric(a)
dim(a)
dim(c)
a["Someout",]
a
typeof(a)
1 * a
c < 1 * a
c
dim(c)
dim(a)
matrix(a)
c <- matrix(a)
c
as.matrix(a)
b = as.matrix(a)
b
View(b)
a[a$Someout]
a[2,]
a[2,] == 1
a[ a[2,]== 1]
View(a)
b = a[,1:5]
b
b = a[,1:11]
b
myFilter = b[1,] == TRUE
myFilter
b
b[myFilter]
b
myFilter
b[2,:][myFilter]
b[2,][myFilter]
b = a[,1:20]
b
myFilter = a[1,] == TRUE
myFilter
myFilter = b[1,] == TRUE
myFilter
b
b[2,][myFilter]
source('hw1/Code1.R')
b <- leave_simulate(50000)
b
b <- leave_simulate(1000000)
b
a
View(a)
b <- leave_simulate(1000000)
0.54*0.64
0.12/0.54
0.6 * 0.1 * (0.2^2 + 0.2^3 + 0.2 + 0.2^2 + 0.2)
0.0864 + 0.032 + 0.06 + 0.02928 + 0.0176
0.12/0.22528
source('hw1/Code1.R')
a <- simline(50000,0.6,0.2,3,5)
p = 0.6
q = 0.2
k = 3
r = 5
p*(1-q)^(r-k)
i = 2
(1-p)*(1-q)^i + (1-p)*q^i +  p * (1-q)^i
ans2 = (1-p)*(1-q)^i + (1-p)*q^i +  p * (1-q)^i
p*(1-q)^2
b <- runif(5)
n = 5
b
b>0
b>0.2
b > 0.4
b[b > 0.4]
b
b[b > 0.4] =1
b
probs <- runif(n)
probs[probs >= p] = 1
probs[probs < p] = 0
p  = 0.4
probs <- runif(n)
probs[probs >= p] = 1
probs[probs < p] = 0
probs
probs <- runif(n)
probs[probs >= p] = 1
probs[probs < p] = 0
1:n
index_mapping <- 1:n
index_mapping
probs
probs <- runif(n-2)
probs[probs >= p] = 1
probs[probs < p] = 0
probs
cbind(1,probs)
cbind(c(1),probs)
rbind(c(1),probs)
c(c(1),probs)
c(c(1),probs,1)
probs <- c(1, probs, 1)
index_mapping
probs
cbind(index_mapping,probs)
data <- cbind(index_mapping, probs)
data
data[probs  == ]
data[probs  == 1]
data[data[,2]  == 1]
data[,2]
data[data$probs == 1]
data[data$probs == 1,]
subset(data, )
subset(data, probs == 1)
valid_index <- subset(data, probs == 1)
valid_index
valid_index <- subset(data, probs == 1)[,1]
valid_index
lapply(valid_index,diff)
diff(valid_index)
valid_index
min(diff(valid_index))
diff(1:10)
min_dist = min(diff(valid_index))
clear
rm(list = ls(all.names = TRUE))
ls
source('hw2/Code2.R')
nreps = 10000
n = 5
p = 0.4
E_U = replicate(nreps, simA_single(n,p))
mean(E_U)
k <- E_U - mean(E_U)
k
k <- k^2
k
mean(k)
source('hw2/Code2.R')
ls
b <- simA(50000, 5, 0.4)
mean(E_U)
E_U = replicate(50000, simA_single(n,p))
mean(E_U)
runif(5)
E_U
expected_value = mean(E_U)
difference = (E_U - expected_value)^2
difference
E_U
expected_value
E_U
4 - expected_value
(4 - expected_value)^2
b <- simA(100000, 5, 0.4)
rm(list = ls(all.names = TRUE))
source('hw2/Code2.R')
b <- simA(100000, 5,0.4)
b <- simA(100000, 5,0.4)
simA_single(5,0.4)
simA_single(5,0.4)
simA_single(5,0.4)
simA_single(5,0.4)
simA_single(5,0.4)
simA_single(5,0.4)
simA_single(5,0.4)
probs <- runif(n-2)
n = 5
probs <- runif(n-2)
k <- probs
probs[probs < p] = 1
p = 0.4
probs[probs < p] = 1
probs
probs
k
probs[probs < p] = 1
rm(list = ls(all.names = TRUE))
source('hw2/Code2.R')
b <- simA(100000, 5, 0.4)
b <- simA(100000, 5, 0.4)
E_U = replicate(nreps, simA_single(n,p))
E_U = replicate(100000, simA_single(n,p))
n = 5
p = 0.4
E_U = replicate(100000, simA_single(n,p))
mean(E_U)
4 * (1-p)^3 + 2 * p*(1-p)^2 + 1 * (2*p*(1-p)^2 + 3 *p^2*(1-p) + p^3)
a <- simA(100000, 5,0.4)
E <- function(M){}
E <- function(M){return(1.792)}
thr = ((1 - E(M))^2 * 2*p*(1-p)^2 + 3 *p^2*(1-p) + p^3) + ((2-E(M))^2 * p*(1-p)^2) + ((4-E(M))^2 * (1-p)^3 )
thr = ((1 - E(M))^2 * (2*p*(1-p)^2 + 3 *p^2*(1-p) + p^3)) + ((2-E(M))^2 * p*(1-p)^2) + ((4-E(M))^2 * (1-p)^3 )
thr
